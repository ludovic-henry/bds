<?php

/**
 * spSport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    BDS
 * @subpackage model
 * @author     Ludovic Henry
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class spSport extends BasespSport {

    public function addOrRemoveParticipant(coCotisant $user) {
        if ($this->isParticipating($user))
            Doctrine_Query::create()
                    ->delete('spParticipant')
                    ->where('sport_id = ?', $this->getId())
                    ->andWhere('cotisant_id = ?', $user->getId())
                    ->execute();
        else {
            $participant = new spParticipant();
            $participant->setSportId($this->getId())
                    ->setCotisantId($user->getId())
                    ->setStatut('Participant')
                    ->setIsAdmin(false)
                    ->save();
        }
    }

    /**
     * Check if a coCotisant is participating to a spSport
     *
     * @param integer $user_id
     * @return bool
     */
    public function isParticipating(coCotisant $user) {
        return Doctrine_Query::create()
                ->from('spParticipant')
                ->where('cotisant_id = ?', $user->getId())
                ->andWhere('sport_id = ?', $this->getId())
                ->count() === 1;
    }

    public function isAdmin(coCotisant $user) {
        return Doctrine_Query::create()
                ->from('spParticipant')
                ->where('cotisant_id = ?', $user->getId())
                ->andWhere('.sport_id = ?', $this->getId())
                ->andWhere('is_admin = true')
                ->count() === 1;
    }

    /**
     *
     * @return array
     */
    public function getResponsables() {
        $responsables = array();

        foreach ($this->getParticipants() as $participant) {
            if ($participant->getStatut() === 'Responsable')
                $responsables[] = $participant;
        }

        return $responsables;
    }

    public function getNextHoraire($time = null) {
        if ($time == null)
            $time = time();

        $jour = date('N', $time);

        for ($i = $jour; $i < $jour + 7; $i++) {
            foreach ($this->getHoraires() as $horaire)
                if ($horaire->getJour() == $i % 7)
                    return $horaire;
        }

        return null;
    }

    public function getParticipantsEmails() {
        $emails = array();

        foreach ($this->getCoCotisants() as $participant) {
            $emails[] = $participant->getEmail();
        }

        return $emails;
    }

    public function isActif() {
        return $this->getIsActif();
    }

    /**
     * The string representation of this object
     *
     * @return  string
     */
    public function __toString() {
        return $this->getNom();
    }

}
