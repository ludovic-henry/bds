<?php

/**
 * mlMail
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    BDS
 * @subpackage model
 * @author     Ludovic Henry
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class mlMail extends BasemlMail {

    public function send(sfMailer $mailer, coCotisant $user, array $options = null) {
        $this->setCoCotisant($user);
        $this->setSentAt('now()');
        $this->save();

        $to = $this->getTo();

        $message = $mailer->compose()
                        ->setFrom($options !== null && array_key_exists('from', $options) ? $options['from'] : $this->getFrom())
                        ->setSender($options !== null && array_key_exists('sender', $options) ? $options['sender'] : $this->getSender())
                        ->setTo($to)
                        ->setSubject($this->getSubject())
                        ->setBody($this->getBody())
                        ->setContentType($options !== null && array_key_exists('content-type', $options) ? $options['content-type'] : $this->getContentType())
                        ->setCharset($options !== null && array_key_exists('charset', $options) ? $options['charset'] : $this->getCharset());

        $this->addAttachements($message);

        $count = $mailer->batchSend($message);

        if ($count != count($to))
            throw new Exception(sprintf("Erreur lors de l'envoi : nombre de message envoyé insuffisant. %d message(s) envoyé(s)", $count));
    }

    protected function getFrom() {
        return $this->getCoCotisant()->getEmail();
    }

    protected function getSender() {
        return 'bds@utbm.fr';
    }

    protected function getTo() {
        $destinataires = $this->getDestinataires();

        $emails = array();

        foreach (explode(',', $destinataires) as $destinataire) {
            $destinataire = trim($destinataire);

            if (filter_var($destinataire, FILTER_VALIDATE_EMAIL) !== false) {
                if (!in_array($destinataire, $emails))
                    $emails[] = $destinataire;
            } else if (($list = mlMailingListTable::getInstance()->findOneBy('nom', $destinataire)) && $list->count() > 0) {
                foreach ($list->getCoCotisants as $cotisant) {
                    if (!in_array($destinataire, $emails))
                        $emails[] = $cotisant->getEmail();
                }
            } else
                throw new Exception("l'adresse d'un des destinataires est invalide");
        }

        return $emails;
    }

    protected function getSubject() {
        return $this->getObjet();
    }

    protected function getBody() {
        return $this->getContenu();
    }

    protected function getContentType() {
        return 'text/plain';
    }

    protected function getCharset() {
        return 'utf8';
    }

    protected function addAttachements($message) {
        
    }

    public function __toString() {
        return $this->getObjet();
    }

}